#lang scheme
(require "../examples/accumulate")
(require "../examples/enumerate-interval")
(provide triple-sum distinct-triples)
(define (flatmap proc seq)
  (accumulate append null (map proc seq)))
(define (triple-sum? s)
  (lambda (triple) 
    (= (+ (car triple) (cadr triple) (caddr triple)) s)))
(define (distinct-triples n)
  (flatmap (lambda (i)
    (flatmap (lambda (j)
      (map (lambda (k) (list i j k))
           (enumerate-interval 1 (- j 1))))
      (enumerate-interval 1 (- i 1))))
    (enumerate-interval 1 n)))
(define (triple-sum n s)
  (filter (triple-sum? s)
    (distinct-triples n)))
