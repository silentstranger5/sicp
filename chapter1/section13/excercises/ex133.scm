#lang scheme
(provide filtered-accumulate filtered-accumulate-iter sum-prime-square)
(define (filtered-accumulate combiner null-value term a next b filter)
  (cond ((> a b) null-value)
        ((filter a) (combiner (term a)
                              (filtered-accumulate combiner null-value term (next a) next b filter)))
        (else (filtered-accumulate combiner null-value term (next a) next b filter))))
(define (filtered-accumulate-iter combiner null-value term a next b filter)
  (define (iter a result)
    (cond ((> a b) result)
          ((filter a) (iter (next a) (combiner result (term a))))
          (else (iter (next a) result))))
  (iter a null-value))
(define (sum-prime-square a b)
  (define (square x) (* x x))
  (define (inc x) (+ x 1))
  (define (prime? a)
    (= (smallest-divisor a) a))
  (define (smallest-divisor a)
    (find-divisor 2 a))
  (define (find-divisor a b)
    (cond ((> (square a) b) b)
          ((divides? a b) a)
          (else (find-divisor (next-factor a) b))))
  (define (divides? a b) (= (remainder b a) 0))
  (define (next-factor a)
    (if (= a 2)
        3
        (+ a 2)))
  (filtered-accumulate-iter + 0 square a inc b prime?))
